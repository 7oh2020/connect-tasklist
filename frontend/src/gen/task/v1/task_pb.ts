// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file task/v1/task.proto (package rpc.task.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message rpc.task.v1.Task
 */
export class Task extends Message<Task> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: bool is_completed = 4;
   */
  isCompleted = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_completed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(
    a: Task | PlainMessage<Task> | undefined,
    b: Task | PlainMessage<Task> | undefined
  ): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.GetTaskListRequest
 */
export class GetTaskListRequest extends Message<GetTaskListRequest> {
  constructor(data?: PartialMessage<GetTaskListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.GetTaskListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetTaskListRequest {
    return new GetTaskListRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetTaskListRequest {
    return new GetTaskListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetTaskListRequest {
    return new GetTaskListRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetTaskListRequest | PlainMessage<GetTaskListRequest> | undefined,
    b: GetTaskListRequest | PlainMessage<GetTaskListRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetTaskListRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.GetTaskListResponse
 */
export class GetTaskListResponse extends Message<GetTaskListResponse> {
  /**
   * @generated from field: repeated rpc.task.v1.Task tasks = 1;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<GetTaskListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.GetTaskListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetTaskListResponse {
    return new GetTaskListResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetTaskListResponse {
    return new GetTaskListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetTaskListResponse {
    return new GetTaskListResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetTaskListResponse | PlainMessage<GetTaskListResponse> | undefined,
    b: GetTaskListResponse | PlainMessage<GetTaskListResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetTaskListResponse, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.CreateTaskRequest
 */
export class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.CreateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateTaskRequest {
    return new CreateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateTaskRequest {
    return new CreateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateTaskRequest {
    return new CreateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined,
    b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateTaskRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.CreateTaskResponse
 */
export class CreateTaskResponse extends Message<CreateTaskResponse> {
  /**
   * @generated from field: string created_id = 1;
   */
  createdId = "";

  constructor(data?: PartialMessage<CreateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.CreateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateTaskResponse {
    return new CreateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateTaskResponse {
    return new CreateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateTaskResponse {
    return new CreateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined,
    b: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateTaskResponse, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.CompleteTaskRequest
 */
export class CompleteTaskRequest extends Message<CompleteTaskRequest> {
  /**
   * @generated from field: string task_id = 1;
   */
  taskId = "";

  constructor(data?: PartialMessage<CompleteTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.CompleteTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CompleteTaskRequest {
    return new CompleteTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CompleteTaskRequest {
    return new CompleteTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CompleteTaskRequest {
    return new CompleteTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CompleteTaskRequest | PlainMessage<CompleteTaskRequest> | undefined,
    b: CompleteTaskRequest | PlainMessage<CompleteTaskRequest> | undefined
  ): boolean {
    return proto3.util.equals(CompleteTaskRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.CompleteTaskResponse
 */
export class CompleteTaskResponse extends Message<CompleteTaskResponse> {
  constructor(data?: PartialMessage<CompleteTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.CompleteTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CompleteTaskResponse {
    return new CompleteTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CompleteTaskResponse {
    return new CompleteTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CompleteTaskResponse {
    return new CompleteTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CompleteTaskResponse | PlainMessage<CompleteTaskResponse> | undefined,
    b: CompleteTaskResponse | PlainMessage<CompleteTaskResponse> | undefined
  ): boolean {
    return proto3.util.equals(CompleteTaskResponse, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.UncompleteTaskRequest
 */
export class UncompleteTaskRequest extends Message<UncompleteTaskRequest> {
  /**
   * @generated from field: string task_id = 1;
   */
  taskId = "";

  constructor(data?: PartialMessage<UncompleteTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.UncompleteTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UncompleteTaskRequest {
    return new UncompleteTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UncompleteTaskRequest {
    return new UncompleteTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UncompleteTaskRequest {
    return new UncompleteTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UncompleteTaskRequest | PlainMessage<UncompleteTaskRequest> | undefined,
    b: UncompleteTaskRequest | PlainMessage<UncompleteTaskRequest> | undefined
  ): boolean {
    return proto3.util.equals(UncompleteTaskRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.UncompleteTaskResponse
 */
export class UncompleteTaskResponse extends Message<UncompleteTaskResponse> {
  constructor(data?: PartialMessage<UncompleteTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.UncompleteTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UncompleteTaskResponse {
    return new UncompleteTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UncompleteTaskResponse {
    return new UncompleteTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UncompleteTaskResponse {
    return new UncompleteTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | UncompleteTaskResponse
      | PlainMessage<UncompleteTaskResponse>
      | undefined,
    b: UncompleteTaskResponse | PlainMessage<UncompleteTaskResponse> | undefined
  ): boolean {
    return proto3.util.equals(UncompleteTaskResponse, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.ChangeTaskNameRequest
 */
export class ChangeTaskNameRequest extends Message<ChangeTaskNameRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ChangeTaskNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.ChangeTaskNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeTaskNameRequest {
    return new ChangeTaskNameRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeTaskNameRequest {
    return new ChangeTaskNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeTaskNameRequest {
    return new ChangeTaskNameRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ChangeTaskNameRequest | PlainMessage<ChangeTaskNameRequest> | undefined,
    b: ChangeTaskNameRequest | PlainMessage<ChangeTaskNameRequest> | undefined
  ): boolean {
    return proto3.util.equals(ChangeTaskNameRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.ChangeTaskNameResponse
 */
export class ChangeTaskNameResponse extends Message<ChangeTaskNameResponse> {
  constructor(data?: PartialMessage<ChangeTaskNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.ChangeTaskNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeTaskNameResponse {
    return new ChangeTaskNameResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeTaskNameResponse {
    return new ChangeTaskNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeTaskNameResponse {
    return new ChangeTaskNameResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | ChangeTaskNameResponse
      | PlainMessage<ChangeTaskNameResponse>
      | undefined,
    b: ChangeTaskNameResponse | PlainMessage<ChangeTaskNameResponse> | undefined
  ): boolean {
    return proto3.util.equals(ChangeTaskNameResponse, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.DeleteTaskRequest
 */
export class DeleteTaskRequest extends Message<DeleteTaskRequest> {
  /**
   * @generated from field: string task_id = 1;
   */
  taskId = "";

  constructor(data?: PartialMessage<DeleteTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.DeleteTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteTaskRequest {
    return new DeleteTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteTaskRequest {
    return new DeleteTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteTaskRequest {
    return new DeleteTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteTaskRequest | PlainMessage<DeleteTaskRequest> | undefined,
    b: DeleteTaskRequest | PlainMessage<DeleteTaskRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteTaskRequest, a, b);
  }
}

/**
 * @generated from message rpc.task.v1.DeleteTaskResponse
 */
export class DeleteTaskResponse extends Message<DeleteTaskResponse> {
  constructor(data?: PartialMessage<DeleteTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.task.v1.DeleteTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteTaskResponse {
    return new DeleteTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteTaskResponse {
    return new DeleteTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteTaskResponse {
    return new DeleteTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteTaskResponse | PlainMessage<DeleteTaskResponse> | undefined,
    b: DeleteTaskResponse | PlainMessage<DeleteTaskResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeleteTaskResponse, a, b);
  }
}
